---
title: "Joins and strings and dates"
author: "Lew"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```

## joins

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
             "lagoon",   "bobcat",    "adult",
              "bluff",   "coyote", "juvenile",
              "creek",      "fox",    "adult",
               "oaks", "squirrel", "juvenile",
              "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### Full join

```{r}
full_animals_sites <- full_join(x = animals, y = sites, by = "location")

## examples if the column names were different
full_join(x = animals, y = sites, by = c("species" = "jurisdiction"))
```

### Left join

```{r}
left_join(x = animals, y = sites, by = "location")

left_join(x = sites, y = animals, by = "location")

## right join
right_join(x = animals, y = sites, by = "location")
```

### Inner join

```{r}
inner_join(x = animals, y = sites, by = "location")

inner_join(x = sites, y = animals, by = "location")
```

Examples of joining when key has non-matching name

```{r}
sites_2 <- sites |> 
  rename(loc = location)

nonmatching <- full_join(x = animals, y = sites_2, by = c("location" = "loc"))


#DOES NOT WORK TO SWITCH VECTOR ORDER
nonmatching <- full_join(x = animals, y = sites_2, by = c("loc" = "location")) 
```

### Semi join

```{r}
semi_join_example <- semi_join(animals, sites)

semi_join(sites, animals)
```

### Anti join

```{r}
anti_join(x = animals, y = sites, by = "location")
anti_join(x = sites, y = animals, by = "location")
```

**Refresher 1:** Starting with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Only include penguins at Biscoe and Dream islands

2.  Remove the `year` and `sex` variables

3.  Add a new column called `body_mass_kg`, with penguin mass converted from grams to kilograms

4.  Rename the `island` variable to `location`

```{r}
penguins_new <- penguins %>%
  filter(island %in% c("Biscoe", "Dream")) %>%
  select(-year, -sex) %>%
  mutate(body_mass_kg = body_mass_g / 1000) %>%
  rename(location = island)
  
```

**Refresher 2:** Staring with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Limit to only Adelie penguins

2.  Remove any observations where `flipper_length_mm` is `NA` (hint: `!is.na()`)

3.  Group the data by `sex`

4.  Find the mean (`mean()`), standard deviation (`sd`) and sample size (`n`) of flipper_length_mm for male and female Adelie penguins, returned in a nice summary table

```{r}
penguins_refresher_2 <- penguins %>%
  filter(species == "Adelie") %>%
  filter(!is.na(flipper_length_mm)) %>%
  group_by(sex) %>%
  summarise(mean_flipper = mean(flipper_length_mm),
            sd_flipper = sd(flipper_length_mm),
            nsize = n())
```

\
