---
title: "Joins and strings and dates"
author: "Lew"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)
```

## joins

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
             "lagoon",   "bobcat",    "adult",
              "bluff",   "coyote", "juvenile",
              "creek",      "fox",    "adult",
               "oaks", "squirrel", "juvenile",
              "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### Full join

```{r}
full_animals_sites <- full_join(x = animals, y = sites, by = "location")

## examples if the column names were different
full_join(x = animals, y = sites, by = c("species" = "jurisdiction"))
```

### Left join

```{r}
left_join(x = animals, y = sites, by = "location")

left_join(x = sites, y = animals, by = "location")

## right join
right_join(x = animals, y = sites, by = "location")
```

### Inner join

```{r}
inner_join(x = animals, y = sites, by = "location")

inner_join(x = sites, y = animals, by = "location")
```

Examples of joining when key has non-matching name

```{r}
sites_2 <- sites |> 
  rename(loc = location)

nonmatching <- full_join(x = animals, y = sites_2, by = c("location" = "loc"))


#DOES NOT WORK TO SWITCH VECTOR ORDER
nonmatching <- full_join(x = animals, y = sites_2, by = c("loc" = "location")) 
```

### Semi join

```{r}
semi_join_example <- semi_join(animals, sites)

semi_join(sites, animals)
```

### Anti join

```{r}
anti_join(x = animals, y = sites, by = "location")
anti_join(x = sites, y = animals, by = "location")
```

**Refresher 1:** Starting with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Only include penguins at Biscoe and Dream islands

2.  Remove the `year` and `sex` variables

3.  Add a new column called `body_mass_kg`, with penguin mass converted from grams to kilograms

4.  Rename the `island` variable to `location`

```{r}
penguins_new <- penguins %>%
  filter(island %in% c("Biscoe", "Dream")) %>%
  select(-year, -sex) %>%
  mutate(body_mass_kg = body_mass_g / 1000) %>%
  rename(location = island)
  
```

**Refresher 2:** Staring with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Limit to only Adelie penguins

2.  Remove any observations where `flipper_length_mm` is `NA` (hint: `!is.na()`)

3.  Group the data by `sex`

4.  Find the mean (`mean()`), standard deviation (`sd`) and sample size (`n`) of flipper_length_mm for male and female Adelie penguins, returned in a nice summary table

```{r}
penguins_refresher_2 <- penguins %>%
  filter(species == "Adelie") %>%
  filter(!is.na(flipper_length_mm)) %>%
  group_by(sex) %>%
  summarise(mean_flipper = mean(flipper_length_mm),
            sd_flipper = sd(flipper_length_mm),
            nsize = n())
```

## Dates and times with `lubridate`

```{r}
my_date <- "03-15-1998"
lubridate::mdy(my_date)

my_date <- "11/7/2003" #day/month/year
lubridate::dmy(my_date)

lubridate::dmy("08-JUN-1974")

my_date <- "19610518"
my_real_date <- lubridate::ymd(my_date)

my_date <- "January 7th, 1997"
lubridate::dmy(my_date)
```

```{r}
lubridate::ymd("1942-08-30")

lubridate::dmy("09/12/94")
```

```{r}
time <- "2020-08-12 11:18:40"
time_new <- lubridate::ymd_hm(time)

with_tz(time_new, "America/Los_Angeles")

with_tz(time_new, "Africa/Accra")

my_time <- lubridate::ymd_hms(time)

year(my_time)
second(my_time)
day(my_time)
month(my_time)
hour(my_time)
minute(my_time)
```

```{r}
teddy_bday<- lubridate::ymd("20170615")

wday(teddy_bday, label = TRUE)

lew_bday <- lubridate::ymd("19971022")
wday(lew_bday, label = TRUE)
week(lew_bday)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm, 
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48, 
  "11/17/2020", "red", 67
)

urchin_ymd <- urchin_counts |> 
  mutate(date = lubridate::mdy(date)) |> 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)
class(time_interval)

time_length(time_interval, "day")
```

## stringr for working with strings

### str_detect

```{r}
my_string <- "Mallory loves Australia"

my_string |> 
  str_detect("cig")

my_string |> 
  str_detect("Australia")

my_string <- c("Mallory", "LewLew", "Victoria", "Atahualpa")
my_string |> 
  str_detect("al")
```

```{r}
skywalkers <- starwars |> 
  filter(str_detect(name, pattern = "Skywalker"))

blue_eyes <- starwars |> 
  filter(str_detect(eye_color, pattern = "blue"))
```

### str_replace() to replace string patterns

```{r}
firewalkers <- starwars |> 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))

```

```{r}
feedback <- c("I  ate  some    nachos", "Wednesday morning    ")

str_trim(feedback) # removes white space at beginning and end of string 
str_squish(feedback) # removes white space

str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)
str_to_sentence(feedback)
```

```{r}
# from starwars, create a new data frame called starwars_lc that adds new column called name_lower containing character names converted to all lowercase

starwars_lc <- starwars |> 
  mutate(name_lower = str_to_lower(name))
```

### case_when()

```{r}
sw_robot <- starwars |> 
  mutate(robot_status = case_when(
    species == "Droid" ~ "A ROBOT!!!",
    species == "Human" ~ "It's a human...",
    TRUE ~ "This is something else"
  ))
  
```
